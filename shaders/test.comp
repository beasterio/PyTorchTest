#version 430 core

#define POS_VEC_SIZE 16 

layout (local_size_x = 32) in;

layout(std430, binding=0) readonly buffer input_geometry_parameters_buffer {
    float geometry_parameters[];
};
layout(std430, binding=1) readonly buffer input_coords_buffer {
    float coords[];
};
layout(std430, binding=2) readonly buffer input_bps_buffer {
    float bps[];
};
layout(std430, binding=3) readonly buffer input_spheres_buffer {
    vec4 spheres;
};
layout(std430, binding=4) readonly buffer input_sd_ground_truth_buffer {
    float sd_ground_truth[];
};
layout(std430, binding=5) readonly buffer input_grad_gt_buffer {
    float grad_gt[];
};

layout(std430, binding=6) buffer output_d_y3_d_coords_buffer {
    float d_y3_d_coords[];
};
layout(std430, binding=7) buffer output_loss_l1_deriv_buffer {
    float loss_l1_deriv[];
};
layout(std430, binding=8) buffer output_positions_buffer {
    float positions[];
};
layout(std430, binding=9) buffer output_nn_4th_layer_buffer {
    float nn_4th_layer[];
};

const ivec2 subnet_descriptor[] = ivec2[4] (ivec2(16, 64), ivec2(64, 32), ivec2(32, 16), ivec2(16, 1));

float[POS_VEC_SIZE] calc_position(vec3 coords_vec)
{
    float result[POS_VEC_SIZE];
    for (int i = 0, offset = 0; i < POS_VEC_SIZE; ++i, offset += 4)
    {
        vec3 n = vec3(bps[offset],bps[offset + 1],bps[offset + 2]);
        float d = bps[offset + 3];

        n = normalize(n);

        float pos = dot(n, coords_vec) - d;
        result[i] = abs(pos);
    }

    return result;
}

float calc_nn_4th_layer(float pos_array[POS_VEC_SIZE])
{
    float omega_0 = 30.f;

    int start = 0;
    int w_size = subnet_descriptor[0].x * subnet_descriptor[0].y;
    float y0[subnet_descriptor[0].y];
    for (int i = 0; i < y0.length(); ++i)
    {
        float val = 0.f;
        int offset = start + i;
        val += geometry_parameters[offset + w_size];

        for (int j = 0; j < subnet_descriptor[0].x; ++j, offset += subnet_descriptor[0].y)
        {
            val += pos_array[j] * geometry_parameters[offset];
        }

        y0[i] = sin(val * omega_0);
    }

    start += w_size + subnet_descriptor[0].y;
    w_size = subnet_descriptor[1].x * subnet_descriptor[1].y;
    float y1[subnet_descriptor[1].y];
    for (int i = 0; i < y1.length(); ++i)
    {
        float val = 0.f;
        int offset = start + i;
        val += geometry_parameters[offset + w_size];

        for (int j = 0; j < subnet_descriptor[1].x; ++j, offset += subnet_descriptor[1].y)
        {
            val += y0[j] * geometry_parameters[offset];
        }
        y1[i] = sin(val * omega_0);
    }

    start += w_size + subnet_descriptor[1].y;
    w_size = subnet_descriptor[2].x * subnet_descriptor[2].y;
    float y2[subnet_descriptor[2].y];
    for (int i = 0; i < y2.length(); ++i)
    {
        float val = 0.f;
        int offset = start + i;
        val += geometry_parameters[offset + w_size];
        
        for (int j = 0; j < subnet_descriptor[2].x; ++j, offset += subnet_descriptor[2].y)
        {
            val += y1[j] * geometry_parameters[offset];
        }
        y2[i] = sin(val * omega_0);
    }

    start += w_size + subnet_descriptor[2].y;
    w_size = subnet_descriptor[3].x * subnet_descriptor[3].y;
    float result = geometry_parameters[start + w_size]; 
    for (int i = 0; i < subnet_descriptor[3].x; ++i)
    {
        result += y2[i] * geometry_parameters[start + i];
    }

    return result;
}

float calc_nn_4th_layer_deriv(int index, vec3 coords_vec)
{
    // second order centered difference approximation of f'(x) as (f(x + eps) - f(x-eps)) / (2*eps)
    float eps = 0.0001; 
    vec3 delta_x = vec3(0, 0, 0);
    delta_x[index] = eps;

    float pos_delta_plus[] = calc_position(coords_vec + delta_x);
    float delta_y_plus = calc_nn_4th_layer(pos_delta_plus);

    float pos_delta_minus[] = calc_position(coords_vec - delta_x);
    float delta_y_minus = calc_nn_4th_layer(pos_delta_minus);

    return (delta_y_plus - delta_y_minus)/(2 * eps);
}

void main()
{
    const uint id = gl_GlobalInvocationID.x;
    if (id >= coords.length() / 3)
    {
        return;
    }

    // positions
    vec3 coords_vec = vec3(coords[3*id], coords[3*id + 1], coords[3*id + 2]);

    float pos_result[] = calc_position(coords_vec);
    // fill output buffer
    for (int i = 0; i < POS_VEC_SIZE; ++i)
    {
        positions[id * POS_VEC_SIZE + i] = pos_result[i];
    }

    // nn_4th_layer
    nn_4th_layer[id] = calc_nn_4th_layer(pos_result);

    for (int i = 0; i < 3; ++i)
    {
        d_y3_d_coords[id*3 + i] = calc_nn_4th_layer_deriv(i, coords_vec);
    }

    // loss_l1_deriv
    float radius = spheres.w;
    loss_l1_deriv[id] = radius * sign(nn_4th_layer[id] * radius - sd_ground_truth[id]);
}